<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>JLPT Vocabulary API</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      position: relative;
      overflow: hidden;
    }

    .floating-words {
      position: absolute;
      inset: 0;
      pointer-events: none;
      z-index: 0;
    }

    .swagger-link {
      position: fixed;
      top: 24px;
      right: 24px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 44px;
      height: 44px;
      border-radius: 12px;
      background: rgba(255, 255, 255, 0.2);
      color: #ffffff;
      padding: 0;
      text-decoration: none;
      backdrop-filter: blur(6px);
      box-shadow: 0 12px 32px rgba(15, 23, 42, 0.28);
      transition: transform 0.2s, box-shadow 0.2s;
      z-index: 2;
    }

    .swagger-link:hover {
      transform: translateY(-1px);
      box-shadow: 0 16px 36px rgba(15, 23, 42, 0.32);
    }

    .swagger-link img {
      width: 24px;
      height: 24px;
      image-rendering: -webkit-optimize-contrast;
    }

    .floating-card {
      position: absolute;
      bottom: -12vh;
      left: 50%;
      transform: translateX(-50%);
      display: inline-flex;
      flex-direction: column;
      gap: 6px;
      min-width: 140px;
      padding: 14px 18px;
      border-radius: 16px;
      background: rgba(255, 255, 255, 0.12);
      backdrop-filter: blur(6px);
      box-shadow: 0 12px 35px rgba(0, 0, 0, 0.18);
      color: #ffffff;
      animation-name: float-word;
      animation-timing-function: linear;
      animation-iteration-count: infinite;
      pointer-events: none;
    }

    @keyframes float-word {
      0% {
        transform: translate(-50%, 8vh) scale(0.95);
        opacity: 0;
      }
      10% {
        opacity: 0.95;
      }
      90% {
        opacity: 0.95;
      }
      100% {
        transform: translate(-50%, -130vh) scale(1.08);
        opacity: 0;
      }
    }

    .floating-card__header {
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .floating-card__badge {
      padding: 4px 8px;
      border-radius: 999px;
      font-size: 0.75rem;
      font-weight: 700;
      background: rgba(255, 255, 255, 0.25);
      color: #10172a;
    }

    .floating-card__word {
      font-size: 1.25rem;
      font-weight: 700;
      letter-spacing: 0.02em;
      text-shadow: 0 6px 16px rgba(0, 0, 0, 0.18);
    }

    .floating-card__furigana {
      font-size: 0.85rem;
      opacity: 0.75;
      letter-spacing: 0.03em;
    }

    .floating-card__meaning {
      font-size: 0.95rem;
      opacity: 0.85;
      letter-spacing: 0.01em;
    }

    .container {
      text-align: center;
      padding: 2rem;
      position: relative;
      z-index: 1;
    }

    h1 {
      font-size: 2.5rem;
      margin-bottom: 1rem;
    }

    p {
      font-size: 1.2rem;
      margin-bottom: 2rem;
    }

    a {
      display: inline-block;
      padding: 0.8rem 2rem;
      background: white;
      color: #667eea;
      text-decoration: none;
      border-radius: 8px;
      font-weight: 600;
      transition: transform 0.2s;
    }

    a:hover {
      transform: translateY(-2px);
    }

    .controls {
      margin-top: 2rem;
      display: inline-flex;
      align-items: center;
      gap: 12px;
      padding: 0.75rem 1rem;
      border-radius: 12px;
      background: rgba(255, 255, 255, 0.15);
      backdrop-filter: blur(4px);
    }

    .controls select {
      appearance: none;
      border: none;
      border-radius: 8px;
      padding: 0.5rem 0.9rem;
      font-size: 0.95rem;
      font-weight: 600;
      color: #333;
      cursor: pointer;
      background: #ffffff;
      box-shadow: 0 4px 12px rgba(15, 23, 42, 0.15);
    }

    .controls button {
      border: none;
      border-radius: 8px;
      padding: 0.55rem 1.2rem;
      font-size: 0.95rem;
      font-weight: 700;
      background: #fbbf24;
      color: #1f2937;
      cursor: pointer;
      transition: transform 0.2s, box-shadow 0.2s;
    }

    .controls button:hover {
      transform: translateY(-1px);
      box-shadow: 0 6px 18px rgba(251, 191, 36, 0.35);
    }

    .controls button:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }

    .toggle-meaning-btn {
      background: rgba(96, 165, 250, 0.32);
      color: #f8fafc;
    }

    .toggle-meaning-btn:hover {
      box-shadow: 0 6px 18px rgba(59, 130, 246, 0.35);
    }

    .hidden {
      display: none;
    }

    .meaning-hidden .floating-card__meaning {
      display: none;
    }

    /* 에러 상태 전용 스타일 */
    .error-container {
      background: white;
      border-radius: 12px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.18);
      padding: 24px;
      max-width: 420px;
      color: #1f2937;
    }

    .error-icon {
      font-size: 32px;
      margin-bottom: 12px;
      color: #ef4444;
    }

    .error-title {
      font-size: 18px;
      margin-bottom: 8px;
      color: #ef4444;
      font-weight: 700;
    }

    .error-message {
      font-size: 14px;
      color: #6b7280;
      margin-bottom: 16px;
    }

    .error-details {
      background: #fee2e2;
      border: 1px solid #fecaca;
      border-radius: 6px;
      padding: 12px;
      margin-bottom: 16px;
      text-align: left;
    }

    .error-code {
      font-weight: 600;
      color: #991b1b;
      margin-bottom: 6px;
      font-size: 13px;
    }

    .error-description {
      color: #7f1d1d;
      font-size: 13px;
    }

    .error-button {
      display: inline-block;
      background: #667eea;
      color: white;
      padding: 10px 20px;
      border-radius: 8px;
      text-decoration: none;
      font-weight: 600;
      transition: background 0.3s;
      font-size: 14px;
    }

    .error-button:hover {
      background: #5568d3;
      transform: none;
    }
  </style>
</head>
<body>
  <a
    class="swagger-link"
    href="/api/docs"
    target="_blank"
    rel="noopener"
    aria-label="Swagger API 문서 보기"
    title="Swagger API 문서 보기"
  >
    <img
      src="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.9.0/favicon-32x32.png"
      alt=""
      aria-hidden="true"
    />
  </a>
  <div class="floating-words" id="floating-words" aria-hidden="true"></div>

  <div id="welcome-state" class="container">
    <h1>🇯🇵 JLPT Vocabulary API</h1>
    <p>JLPT 단어 학습을 위한 API 서버입니다</p>
    <div class="controls">
      <label for="level-select" class="hidden">JLPT 레벨 선택</label>
      <select id="level-select" aria-label="JLPT 레벨 선택">
        <option value="1">N1</option>
        <option value="2">N2</option>
        <option value="3">N3</option>
        <option value="4">N4</option>
        <option value="5" selected>N5</option>
      </select>
      <button type="button" id="add-word-btn">추가</button>
      <button
        type="button"
        id="toggle-meaning-btn"
        class="toggle-meaning-btn"
        aria-pressed="false"
      >
        뜻 숨기기
      </button>
    </div>
  </div>

  <div id="error-state" class="error-container hidden">
    <h1 class="error-title">인증 실패</h1>
    <p class="error-message">이메일 인증 중 문제가 발생했습니다.</p>

    <div class="error-details">
      <div class="error-code">오류 코드: <span id="error-code"></span></div>
      <div class="error-description" id="error-description"></div>
    </div>

    <a href="#" class="error-button" onclick="window.close(); return false;">닫기</a>
  </div>

  <script>
    function parseHashParams() {
      if (!window.location.hash) {
        return {
          error: null,
          error_code: null,
          error_description: null,
          access_token: null,
          refresh_token: null
        };
      }
      
      var hash = window.location.hash.substring(1);
      var params = new URLSearchParams(hash);
      return {
        error: params.get('error'),
        error_code: params.get('error_code'),
        error_description: params.get('error_description'),
        access_token: params.get('access_token'),
        refresh_token: params.get('refresh_token')
      };
    }

    function getErrorMessage(errorCode) {
      var messages = {
        'otp_expired': '이메일 인증 링크가 만료되었습니다.',
        'otp_disabled': '이메일 인증이 비활성화되었습니다.',
        'access_denied': '접근이 거부되었습니다.',
        'invalid_request': '잘못된 요청입니다.'
      };
      return messages[errorCode] || errorCode;
    }

    function decodeErrorDescription(description) {
      if (!description) return '';
      return decodeURIComponent(description.replace(/\+/g, ' '));
    }

    window.addEventListener('DOMContentLoaded', function() {
      var params = parseHashParams();
      
      // 인증 성공 시 토큰 처리
      if (params.access_token) {
        console.log('Authentication successful');
        window.opener?.postMessage({ 
          accessToken: params.access_token, 
          refreshToken: params.refresh_token 
        }, '*');
      }
      
      // 에러 발생 시 에러 화면 표시
      if (params.error || params.error_code) {
        document.getElementById('welcome-state').classList.add('hidden');
        document.getElementById('error-state').classList.remove('hidden');
        document.getElementById('floating-words')?.classList.add('hidden');
        
        document.getElementById('error-code').textContent = getErrorMessage(params.error_code || params.error);
        document.getElementById('error-description').textContent = decodeErrorDescription(params.error_description);
        return;
      }

      renderFloatingWords();

      var addButton = document.getElementById('add-word-btn');
      var levelSelect = document.getElementById('level-select');
      var toggleMeaningButton = document.getElementById('toggle-meaning-btn');
      var meaningVisible = true;

      if (addButton && levelSelect) {
        addButton.addEventListener('click', function() {
          if (addButton.disabled) {
            return;
          }

          addButton.disabled = true;
          addWordByLevel(levelSelect.value)
            .catch(function(error) {
              console.warn('Failed to add floating JLPT vocabulary card', error);
            })
            .finally(function() {
              addButton.disabled = false;
            });
        });
      }

      function updateMeaningVisibility() {
        document.body.classList.toggle('meaning-hidden', !meaningVisible);
        if (toggleMeaningButton) {
          toggleMeaningButton.textContent = meaningVisible ? '뜻 숨기기' : '뜻 보기';
          toggleMeaningButton.setAttribute('aria-pressed', String(!meaningVisible));
        }
      }

      if (toggleMeaningButton) {
        toggleMeaningButton.addEventListener('click', function() {
          meaningVisible = !meaningVisible;
          updateMeaningVisibility();
        });
        updateMeaningVisibility();
      }
    });

    function normalizeEntry(item) {
      if (!item) {
        return null;
      }

      var rawLevel = item.level ?? item.Level ?? item.levels;
      var levelLabel = rawLevel ? String(rawLevel) : null;
      var furigana =
        item.furigana ||
        item.reading ||
        item.pronunciation ||
        item.kana ||
        item.word_kana ||
        '';

      return {
        word: item.word || item.meaning || item.meaning_ko || '',
        furigana: furigana,
        meaningKo: item.meaning_ko || item.meaning || '',
        level: levelLabel,
      };
    }

    function createFloatingCard(entry) {
      var card = document.createElement('div');
      card.className = 'floating-card';
      card.style.left = `${8 + Math.random() * 84}%`;
      card.style.animationDelay = `${Math.random() * -24}s`;
      card.style.animationDuration = `${24 + Math.random() * 16}s`;
      card.style.opacity = `${0.5 + Math.random() * 0.4}`;

      var header = document.createElement('div');
      header.className = 'floating-card__header';

      if (entry.level) {
        var badge = document.createElement('span');
        badge.className = 'floating-card__badge';
        badge.textContent = `N${entry.level}`;
        header.appendChild(badge);
      }

      var wordEl = document.createElement('div');
      wordEl.className = 'floating-card__word';
      wordEl.textContent = entry.word;

      header.appendChild(wordEl);
      card.appendChild(header);

      if (entry.furigana) {
        var furiganaEl = document.createElement('div');
        furiganaEl.className = 'floating-card__furigana';
        furiganaEl.textContent = entry.furigana;
        card.appendChild(furiganaEl);
      }

      if (entry.meaningKo) {
        var meaningEl = document.createElement('div');
        meaningEl.className = 'floating-card__meaning';
        meaningEl.textContent = entry.meaningKo;
        card.appendChild(meaningEl);
      }

      return card;
    }

    async function fetchRandomEntries(count, level) {
      var query = new URLSearchParams({ count: String(count) });
      if (level) {
        query.set('level', level);
      }

      const response = await fetch(`/api/jlpt-voca/random/level?${query.toString()}`);
      if (!response.ok) {
        throw new Error(`Failed to fetch random voca: ${response.status}`);
      }

      const data = await response.json();
      if (!Array.isArray(data)) {
        throw new Error('Unexpected random voca response shape');
      }

      return data
        .map(normalizeEntry)
        .filter(function(entry) {
          return entry && entry.word;
        });
    }

    async function renderFloatingWords() {
      const container = document.getElementById('floating-words');
      if (!container) {
        return;
      }

      try {
        const items = await fetchRandomEntries(12);
        container.innerHTML = '';

        const fallbackWords = [
          { word: '日本語', furigana: 'にほんご', meaningKo: '일본어', level: '5' },
          { word: '勉強', furigana: 'べんきょう', meaningKo: '공부', level: '5' },
          { word: '語彙', furigana: 'ごい', meaningKo: '어휘', level: '2' },
          { word: '試験', furigana: 'しけん', meaningKo: '시험', level: '3' },
          { word: '挑戦', furigana: 'ちょうせん', meaningKo: '도전', level: '2' },
          { word: '未来', furigana: 'みらい', meaningKo: '미래', level: '4' },
          { word: '努力', furigana: 'どりょく', meaningKo: '노력', level: '3' },
          { word: '合格', furigana: 'ごうかく', meaningKo: '합격', level: '1' },
          { word: '集中', furigana: 'しゅうちゅう', meaningKo: '집중', level: '1' },
          { word: '夢', furigana: 'ゆめ', meaningKo: '꿈', level: '4' },
          { word: '友情', furigana: 'ゆうじょう', meaningKo: '우정', level: '5' },
          { word: '希望', furigana: 'きぼう', meaningKo: '희망', level: '3' },
        ];

        const entries = items.length ? items : [];

        while (entries.length < 12 && fallbackWords.length) {
          entries.push(fallbackWords.shift());
        }

        entries.slice(0, 12).forEach((entry) => {
          const card = createFloatingCard(entry);
          container.appendChild(card);
        });
      } catch (error) {
        console.warn('Failed to render floating JLPT vocabulary', error);
      }
    }

    async function addWordByLevel(level) {
      const container = document.getElementById('floating-words');
      if (!container) {
        return;
      }

      const entries = await fetchRandomEntries(1, level);
      const entry =
        entries[0] ||
        {
          word: '学習',
          furigana: 'がくしゅう',
          meaningKo: '학습',
          level: level,
        };

      const card = createFloatingCard(entry);
      container.appendChild(card);
    }
  </script>
</body>
</html>
